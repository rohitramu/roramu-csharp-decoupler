namespace RoRamu.Decoupler.DotNet.Generator
{
    using System;
    using RoRamu.Utils.CSharp;

    /// <summary>
    /// Base class for generator implementations.
    /// </summary>
    public abstract class Generator
    {
        /// <summary>
        /// Generates the transmitter class.
        /// </summary>
        /// <param name="contract">The contract for which to generate the transmitter class.</param>
        /// <param name="implementationName">The name of the ouput class.  This will also be the name of the output file before appending the extension.</param>
        /// <param name="namespace">The namespace in which to put the generated classes.</param>
        /// <param name="accessLevel">The access level of the generated classes.</param>
        public string Run(
            ContractDefinition contract,
            string implementationName,
            string @namespace,
            CSharpAccessModifier accessLevel = CSharpAccessModifier.Public)
        {
            if (contract == null)
            {
                throw new ArgumentNullException(nameof(contract));
            }
            if (implementationName == null)
            {
                throw new ArgumentNullException(nameof(implementationName));
            }
            if (!CSharpNamingUtils.IsValidIdentifier(implementationName))
            {
                throw new ArgumentException($"Implementation name must be a valid class name: {implementationName}", nameof(implementationName));
            }
            if (@namespace == null)
            {
                throw new ArgumentNullException(nameof(@namespace));
            }

            foreach (string namespacePart in @namespace.Split('.'))
            {
                if (!CSharpNamingUtils.IsValidIdentifier(namespacePart))
                {
                    throw new ArgumentException($"The provided namespace is invalid because the part '{namespacePart}' is not a valid C# identifier: {@namespace}", nameof(@namespace));
                }
            }

            // Validate the contract
            this.ValidateContract(contract);

            // Generate the code
            CSharpFile file = this.GenerateCode(contract, implementationName, @namespace, accessLevel);

            string result = file.ToString();
            return result;
        }

        /// <summary>
        /// Generates code using the given contract.
        /// </summary>
        /// <param name="contract">The contract to generate code from.</param>
        /// <param name="implementationName">The name of the implementation.</param>
        /// <param name="namespace">The namespace in which to put the generated classes.</param>
        /// <param name="accessLevel">The access level of the generated classes.</param>
        /// <returns>The generated code.</returns>
        protected abstract CSharpFile GenerateCode(ContractDefinition contract, string implementationName, string @namespace, CSharpAccessModifier accessLevel);

        /// <summary>
        /// Checks if the contract is valid, and throws if it is not.
        /// </summary>
        /// <param name="contract">The contract to check.</param>
        protected virtual void ValidateContract(ContractDefinition contract)
        {
            // Null check
            if (contract == null)
            {
                throw new ArgumentNullException(nameof(contract));
            }

            // Make sure we have a valid name, as the generated class will have this name
            if (!CSharpNamingUtils.IsValidIdentifier(contract.Name))
            {
                throw new ArgumentException($"Contract name is not a valid C# identifier: {contract.Name}", nameof(contract));
            }
        }

        /// <summary>
        /// Gets the file header.
        /// </summary>
        /// <param name="contract">The contract which will be used when generating the file.</param>
        /// <returns>The file header.</returns>
        protected virtual CSharpComment GetFileHeader(ContractDefinition contract)
        {
            CSharpComment result = new CSharpComment($@"
DO NOT MODIFY - THIS IS AN AUTO-GENERATED FILE.

This file was generated by the <see cref=""{this.GetType().FullName}"" /> class.
".Trim()
            );

            return result;
        }
    }
}